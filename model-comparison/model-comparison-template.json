{
    "components": [
        {
            "type": "textarea",
            "id": "prompt",
            "label": "Prompt",
            "placeholder": "Write a prompt here",
            "isRequired": false,
            "showError": false,
            "value": ""
        },
        {
            "type": "button",
            "id": "button",
            "text": "Generate",
            "buttonType": "primary"
        },
        {
            "type": "grid",
            "id": "r_7ia3mu",
            "columns": [
                {
                    "span": 12,
                    "id": "r_xrilzo",
                    "components": [
                        {
                            "type": "textarea",
                            "id": "model1_res",
                            "label": "Cohere",
                            "placeholder": "Placeholder",
                            "isRequired": false,
                            "showError": false,
                            "value": ""
                        },
                        {
                            "type": "rating",
                            "id": "r_6dkk8l",
                            "label": "Rate the answer",
                            "value": null,
                            "numberOfStars": 5
                        },
                        {
                            "type": "radio",
                            "id": "r_sh3pla",
                            "label": "Assess the completion's comprehensiveness.",
                            "isRequired": false,
                            "showError": false,
                            "value": null,
                            "options": [
                                {
                                    "value": "Complete",
                                    "checked": false
                                },
                                {
                                    "value": "Partially complete",
                                    "checked": false
                                },
                                {
                                    "value": "Incomplete",
                                    "checked": false
                                }
                            ]
                        }
                    ]
                },
                {
                    "span": 12,
                    "id": "r_i16xx1",
                    "components": [
                        {
                            "type": "textarea",
                            "id": "model2_res",
                            "label": "Open AI",
                            "placeholder": "Placeholder",
                            "isRequired": false,
                            "showError": false,
                            "value": ""
                        },
                        {
                            "type": "rating",
                            "id": "r_4g1tp9",
                            "label": "Rate the answer",
                            "value": null,
                            "numberOfStars": 5
                        },
                        {
                            "type": "radio",
                            "id": "r_fza8ad",
                            "label": "Assess the completion's comprehensiveness.",
                            "isRequired": false,
                            "showError": false,
                            "value": null,
                            "options": [
                                {
                                    "value": "Complete",
                                    "checked": false
                                },
                                {
                                    "value": "Partially complete",
                                    "checked": false
                                },
                                {
                                    "value": "Incomplete",
                                    "checked": false
                                }
                            ]
                        }
                    ]
                }
            ],
            "spanSum": 24
        }
    ],
    "code": "### Libraries \nfrom typing import List, Union\nfrom accessor import (\n    getValue,\n    setValue,\n    setLoading\n)\nfrom environments import url\nimport requests.asyncs as requests\n\n### UI Components\ninput_prompt = ['prompt']\nbutton_button = ['button']\ntextarea_model1_res = ['model1_res']\ntextarea_model2_res = ['model2_res']\n\n### Submit button event handler\nasync def on_button_click(path: List[Union[str, int]]):\n    ### Start loading\n    setLoading(True)\n\n    ### Get values\n    prompt = getValue(input_prompt)\n\n    ### Request with prompts\n    completionCohere = await cohereCompletion(prompt)\n    completionOpenAi = await openAiCompletion(prompt)\n\n    ### Set the completion values in the UI\n    setValue(textarea_model1_res, completionCohere)\n    setValue(textarea_model2_res, completionOpenAi)\n\n    ### Remove the loading\n    setLoading(False)\n    return\n\n### OpenAI Completion\nasync def openAiCompletion(message: str):\n    ### Create OpenAI request body\n    questionBody = {\n        \"model\": \"gpt-3.5-turbo\",\n        \"messages\": [{\"role\": \"user\", \"content\": message}]\n    }\n\n    ### Create OpenAI headers object\n    headers = {\n      \"Content-Type\": \"application/json\"\n    }\n\n    ### Send the request\n    fetchedValue = await requests.post(\n      url,\n      json=questionBody,\n      headers=headers\n    )\n\n    ### Parse the response\n    res = fetchedValue.json()\n\n    ### Get the completion\n    answer = res[\"choices\"][0][\"message\"][\"content\"]\n    return answer\n\n### Cohere Completion\nasync def cohereCompletion(message: str):\n    ### Create Cohere request body\n    questionBody = {\n        \"cohere\": True,\n        \"prompt\": message\n    }\n\n    ### Create Cohere headers object\n    headers = {\n      \"Content-Type\": \"application/json\"\n    }\n\n    ### Send the request\n    fetchedValue = await requests.post(\n      url,\n      json=questionBody,\n      headers=headers\n    )\n\n    ### Parse the response\n    res = fetchedValue.json()\n\n    ### Get the completion\n    answer = res[\"generations\"][0][\"text\"]\n    return answer",
    "environments": [
        {
            "name": "url",
            "value": "https://generative.devsuperannotate.com/generate",
            "secure": false
        }
    ]
}
